#!/usr/bin/env sh
"\"",`$(echo --% ' |out-null)" >$null;function :{};function dv{<#${/*'>/dev/null )` 2>/dev/null;dv() { #>
echo "1.38.3"; : --% ' |out-null <#'; }; version="$(dv)"; deno="$HOME/.deno/$version/bin/deno"; if [ -x "$deno" ]; then  exec "$deno" run -q -A "$0" "$@";  elif [ -f "$deno" ]; then  chmod +x "$deno" && exec "$deno" run -q -A "$0" "$@";  fi; bin_dir="$HOME/.deno/$version/bin"; exe="$bin_dir/deno"; has () { command -v "$1" >/dev/null; } ;  if ! has unzip; then if ! has apt-get; then  has brew && brew install unzip; else  if [ "$(whoami)" = "root" ]; then  apt-get install unzip -y; elif has sudo; then  echo "Can I install unzip for you? (its required for this command to work) ";read ANSWER;echo;  if [ "$ANSWER" =~ ^[Yy] ]; then  sudo apt-get install unzip -y; fi; elif has doas; then  echo "Can I install unzip for you? (its required for this command to work) ";read ANSWER;echo;  if [ "$ANSWER" =~ ^[Yy] ]; then  doas apt-get install unzip -y; fi; fi;  fi;  fi;  if ! has unzip; then  echo ""; echo "So I couldn't find an 'unzip' command"; echo "And I tried to auto install it, but it seems that failed"; echo "(This script needs unzip and either curl or wget)"; echo "Please install the unzip command manually then re-run this script"; exit 1;  fi;  repo="denoland/deno"; if [ "$OS" = "Windows_NT" ]; then target="x86_64-pc-windows-msvc"; else :;  case $(uname -sm) in "Darwin x86_64") target="x86_64-apple-darwin" ;; "Darwin arm64") target="aarch64-apple-darwin" ;; "Linux aarch64") repo="LukeChannings/deno-arm64" target="linux-arm64" ;; "Linux armhf") echo "deno sadly doesn't support 32-bit ARM. Please check your hardware and possibly install a 64-bit operating system." exit 1 ;; *) target="x86_64-unknown-linux-gnu" ;; esac; fi; deno_uri="https://github.com/$repo/releases/download/v$version/deno-$target.zip"; exe="$bin_dir/deno"; if [ ! -d "$bin_dir" ]; then mkdir -p "$bin_dir"; fi;  if ! curl --fail --location --progress-bar --output "$exe.zip" "$deno_uri"; then if ! wget --output-document="$exe.zip" "$deno_uri"; then echo "Howdy! I looked for the 'curl' and for 'wget' commands but I didn't see either of them. Please install one of them, otherwise I have no way to install the missing deno version needed to run this code"; exit 1; fi; fi; unzip -d "$bin_dir" -o "$exe.zip"; chmod +x "$exe"; rm "$exe.zip"; exec "$deno" run -q -A "$0" "$@"; #>}; $DenoInstall = "${HOME}/.deno/$(dv)"; $BinDir = "$DenoInstall/bin"; $DenoExe = "$BinDir/deno.exe"; if (-not(Test-Path -Path "$DenoExe" -PathType Leaf)) { $DenoZip = "$BinDir/deno.zip"; $DenoUri = "https://github.com/denoland/deno/releases/download/v$(dv)/deno-x86_64-pc-windows-msvc.zip";  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  if (!(Test-Path $BinDir)) { New-Item $BinDir -ItemType Directory | Out-Null; };  Function Test-CommandExists { Param ($command); $oldPreference = $ErrorActionPreference; $ErrorActionPreference = "stop"; try {if(Get-Command "$command"){RETURN $true}} Catch {Write-Host "$command does not exist"; RETURN $false}; Finally {$ErrorActionPreference=$oldPreference}; };  if (Test-CommandExists curl) { curl -Lo $DenoZip $DenoUri; } else { curl.exe -Lo $DenoZip $DenoUri; };  if (Test-CommandExists curl) { tar xf $DenoZip -C $BinDir; } else { tar -Lo $DenoZip $DenoUri; };  Remove-Item $DenoZip;  $User = [EnvironmentVariableTarget]::User; $Path = [Environment]::GetEnvironmentVariable('Path', $User); if (!(";$Path;".ToLower() -like "*;$BinDir;*".ToLower())) { [Environment]::SetEnvironmentVariable('Path', "$Path;$BinDir", $User); $Env:Path += ";$BinDir"; } }; & "$DenoExe" run -q -A "$PSCommandPath" @args; Exit $LastExitCode; <# 
# */0}`;
import { FileSystem, glob } from "https://deno.land/x/quickr@0.6.62/main/file_system.js"
import { run, hasCommand, throwIfFails, zipInto, mergeInto, returnAsString, Timeout, Env, Cwd, Stdin, Stdout, Stderr, Out, Overwrite, AppendTo, } from "https://deno.land/x/quickr@0.6.62/main/run.js"
import { Console, clearAnsiStylesFrom, black, white, red, green, blue, yellow, cyan, magenta, lightBlack, lightWhite, lightRed, lightGreen, lightBlue, lightYellow, lightMagenta, lightCyan, blackBackground, whiteBackground, redBackground, greenBackground, blueBackground, yellowBackground, magentaBackground, cyanBackground, lightBlackBackground, lightRedBackground, lightGreenBackground, lightYellowBackground, lightBlueBackground, lightMagentaBackground, lightCyanBackground, lightWhiteBackground, bold, reset, dim, italic, underline, inverse, strikethrough, gray, grey, lightGray, lightGrey, grayBackground, greyBackground, lightGrayBackground, lightGreyBackground, } from "https://deno.land/x/quickr@0.6.62/main/console.js"

import archy from "https://deno.land/x/archaeopteryx@1.0.7/mod.ts"
import * as yaml from "https://deno.land/std@0.168.0/encoding/yaml.ts"
import { selectOne } from "../support/js_tools/generic/input_tools.js"
import "../support/js_tools/env_vars.js"
import { mergeUnrelated, gitUrl } from "../support/js_tools/git_stuff.js"
import { project } from "../support/js_tools/project.js"
import { createStorageObject } from "https://deno.land/x/storage_object@0.0.3.4/deno.js"
import { capitalize, indent, toCamelCase, digitsToEnglishArray, toPascalCase, toKebabCase, toSnakeCase, toScreamingtoKebabCase, toScreamingtoSnakeCase, toRepresentation, toString, regex, findAll, iterativelyFindAll, escapeRegexMatch, escapeRegexReplace, extractFirst, isValidIdentifier, removeCommonPrefix, didYouMean } from "https://deno.land/x/good@1.6.0.0/string.js"
const { projectRoot, settingsPath, certFile, keyFile, catkinFolder, serverFolder, websiteEntrypoint, rbServerPath } = project
const storageObject = createStorageObject(`${projectRoot}/../.submission_info.yaml`)


const taGithubUsername = `jeff-hykin`
const campusWireUrl = `https://campuswire.com/c/GF0FF0752`
const taEmail = `jeff.hykin@tamu.edu`


// 
// check repo URL
// 
const repoUrl = await gitUrl()
if ( repoUrl.match(/.*\/survivor_buddy(\.git)?($|\/)/) ) {
    console.log(`I think you used the wrong template :/ sorry.`)
    console.log(`- Go to https://github.com/${taGithubUsername}/tamu_csce_635_labs.git`)
    console.log(`- Follow the instructions on there `)
    console.log(`- Run the submit command from inside that repo`)
} else if (repoUrl.match(regex`${/.*\//}${taGithubUsername}${/\/tamu_csce_635_labs/}`)) {
    console.log(`I think you cloned instead of making your own repo with the "Use template button"`)
    console.log(`- Go to https://github.com/${taGithubUsername}/tamu_csce_635_labs.git`)
    console.log(`- Follow the instructions on there `)
    console.log(`- Run the submit command from inside that repo`)
}

// 
// repo is shared
// 
if (!storageObject.hasInvitedTaCollaborator) {
    if (confirm(`have you added ${taGithubUsername} as a collaborator?\n(part of the repo instructions)\n(https://github.com/${taGithubUsername}/tamu_csce_635_labs.git)\n`)) {
        console.log(`great\n`)
        storageObject.hasInvitedTaCollaborator = true
    } else {
        console.log(`Okay please do that then re-run this script`)
        Deno.exit()
    }
}

// 
// repo has an email 
// 
if (!storageObject.associatedNameAndRepo) {
    if (confirm(`have you sent a message to ${taGithubUsername} telling me your tamu email and repo url?\n(just message me on CampusWire: ${campusWireUrl})\n`)) {
        console.log(`great\n`)
        storageObject.associatedNameAndRepo = true
    } else {
        console.log(`Okay please do that then re-run this script`)
        Deno.exit()
    }
}

const whichWeek = await selectOne({
    message: `Which week?`,
    showList: true,
    showInfo: false,
    options: [
        "lab 1: Learning the ropes",
        "lab 2: Following a schema",
        "lab 3: Multi behavior",
        "lab 3: Face detection",
    ],
    autocompleteOnSubmit: true,
})

// 
// lab1
// 
if (whichWeek == "lab 1: Learning the ropes") {
    if (confirm("have you demonstrated some tasks to the TA?\n(choose no if you want to submit a video)\n")) {
        storageObject.lab1 = { ...storageObject.lab1, week1: { done: true, demonstrated: true, } }
    } else {
        if (confirm("have you uploaded a video to your tamu google drive?")) {
            if (confirm(`did you share it with ${taEmail}?`)) {
                while (1) {
                    const url = prompt(`what's the URL to the video?`)
                    try {
                        new URL(url)
                        storageObject.lab1 = { ...storageObject.lab1, week1: { done: true, videoUrl: url, } }
                        break
                    } catch (error) {
                        console.log(`Hmmm, I think that might not be a valid URL.\nMake sure it includes the https://\nAnd if you need to cancel press CTRL+C`)
                    }
                }
            } else {
                console.log(`Okay please do that then re-run this script`)
                Deno.exit()
            }
        } else {
            console.log(`Okay please do that then re-run this script`)
            Deno.exit()
        }
    }
    console.log(`great, let me upload your changes`)
    const tagName = `lab1_week1_tag`
    await run`git add -A`
    await run`git commit -m ${`lab1 week1 submit`} ${Stderr(null)}`
    await run`git push --delete origin ${tagName} ${Stderr(null)}`
    await run`git push --delete ${tagName} ${Stderr(null)}`
    await run`git tag ${tagName}`
    await run`git push origin ${tagName}`
    await run`git push`
    console.log(`If you don't see any error messages you should be good to go 👍`)
}


// (this comment is part of deno-guillotine, dont remove) #>